#!/usr/bin/env python3

import os
import sys
import yaml
import argparse
import random
import math

YAML_CONFIG = "kconfig.yaml"
FINAL_CONFIG = "src/include/config.h"

try:
	import pystache
except:
	print("Unable to import pystache, please install")
	print("pip3 install pystache")
	sys.exit(1)

def find_files(fname):
	ret = []
	sdir = os.getcwd()
	for root, dirs, files in os.walk(sdir):
		if fname in files:
			ret.append(os.path.join(root, fname))
	return ret

def simplify_configs(d):
	for key, val in d.items():
		if isinstance(val, dict):
			d[key] = val.get("value")
	return d

def get_configs(fname):
	ret = {}
	fpaths = find_files(fname)
	for fpath in fpaths:
		with open(fpath, "r") as f:
			data = yaml.safe_load(f)
		ret = {**ret, **data}

	ret = simplify_configs(ret)
	return ret


def check_constraints(obj):
	ret = True
	for key, val in obj.items():
		c = val.get("constraint")
		if c is None: continue

		e = c.replace("{{value}}", str(val["value"]))
		if eval(e) is False:
			print("Constraint {} failed for object {}".format(e, key))
			ret = False
	return ret

def get_randint(randused):
	num = random.randint(0, int(math.pow(2, 32)) - 1)
	while num in randused:
		num = random.randint(0, int(math.pow(2, 32)) - 1)
	return num

def generate(config):
	base = """
/*
* This file has been autogenerated and will be overwritten during the build
* process, do NOT make any manual changes.
*/

#ifndef __KERNEL_CONFIG_H
#define __KERNEL_CONFIG_H

{{#defines}}
#define {{name}} {{value}}
{{/defines}}

{{#undefined}}
// {{name}} has not been defined
{{/undefined}}

#endif
"""

	defines = []
	undefined = []

	randused = []
	rands = get_configs("rand.yaml")
	for key, val in rands.items():
		if isinstance(val, list):
			for v in val:
				num = get_randint(randused)
				randused.append(num)
				defines.append({"name": key.upper() + "_" + v.upper(), "value": hex(num)})

		else:
			num = get_randint(randused)
			randused.append(num)
			defines.append({"name": key.upper() + "_" + val.upper(), "value": hex(num)})


	platform = get_configs(os.environ.get("PLATFORM", "NONAME") + ".yaml")
	archvalues = get_configs(os.environ.get("ARCH", "NONAME") + ".yaml")
	cc = {**platform, **archvalues}
	for key, val in cc.items():
		if val is None:
			print("WARNING: Malformed input, {} was set to None".format(key))
		else:
			defines.append( {"name": key.upper(), "value": val} )

	for key, val in config.items():
		defined = True
		ins = {
			"name": "CONFIG_" + key.upper(),
			"value": val["value"]
		}
		if val["type"] == "bool":
			if ins["value"] == True:
				ins["value"] = 1
			else:
				defined = False
		
		if defined:
			defines.append(ins)
		else:
			undefined.append(ins)

	rhash = {
		"defines": defines,
		"undefined": undefined
	}
	data = pystache.render(base, rhash)

	with open(FINAL_CONFIG, "w") as f:
		f.write(data)

	print("Wrote config file to {}".format(FINAL_CONFIG))


def listconstraints():
	fnames = find_files("config.yaml")
	data = ""
	for fname in fnames:
		data += open(fname).read()

	config = yaml.load(data, yaml.SafeLoader)
	for key, val in config.items():
		if "constraint" in val:
			print("{}: '{}'".format(key, val["constraint"]))


def getconfig():
	arch = os.environ.get("ARCH")
	if arch == None:
		print("ARCH_DIR environmental variable was not set")
		sys.exit(1)

	fname = os.path.join(os.path.join("src/arch", arch), "arch.yaml")
	
	try:
		with open(fname, "r") as f:
			data = f.read()
	except:
		data = ""

	consto = yaml.load(data, Loader=yaml.SafeLoader)

	if consto is None:
		consto = {}

	fnames = find_files("config.yaml")
	data = ""
	for fname in fnames:
		data += open(fname).read()

	config = yaml.load(data, yaml.SafeLoader)

	# Set all default values
	for key, val in config.items():
		if "default" in val:
			config[key]["value"] = val["default"]
			del config[key]["default"]
		else:
			print("Configuration object {} did not have a default value".format(key))
			sys.exit(1)

	# Remove what is not supported
	for key, val in consto.items():
		if key in config:
			if val != config[key]["value"]:
				print("Value {} in {} is not supported by arch, changing to: {}".format(config[key]["value"], key, val))
				config[key]["value"] = val

	res = check_constraints(config)
	if res is False:
		print("Default config is not valid")
		sys.exit(1)

	return config

def defconfig():
	config = getconfig()
	res = {}
	for key, value in config.items():
		res[key] = value["value"]

	with open(YAML_CONFIG, "w") as f:
		yaml.dump(res, f)

def get_kconfig():
	if os.path.isfile(YAML_CONFIG) is False:
		print("File {} does not exist".format(YAML_CONFIG))
		sys.exit(1)

	with open(YAML_CONFIG, "r") as f:
		data = f.read()

	return yaml.safe_load(data)


def checkvalid():
	realconfig = get_kconfig()

	config = getconfig()

	# Override with what user has set
	for key, val in config.items():
		if key in realconfig:
			config[key]["value"] = realconfig[key]
	
	if check_constraints(config) is False:
		print("Config was not valid :(")
		sys.exit(1)
	else:
		print("Config was valid :)")
		return realconfig, config

def genconfig():
	real, conf = checkvalid()
	generate(conf)

# Code taken from
# https://stackoverflow.com/a/47626150
def split_string(str, limit, sep=" "):
	words = str.split()
	if max(map(len, words)) > limit:
		raise ValueError("limit is too small")
	res, part, others = [], words[0], words[1:]
	for word in others:
		if len(sep)+len(word) > limit-len(part):
			res.append(part)
			part = word
		else:
			part += sep+word
	if part:
		res.append(part)
	return res

def pretty_print_constraint(cons, name):
	rhash = {"value": name}
	data = pystache.render(cons, rhash)
	return data
	

def describe(item):
	config = getconfig()
	for key, val in config.items():
		if item is not None and item != key:	continue
		print("{} - {}".format(
			key,
			val.get("type", "Unspecified type"),
		))
		print("\tDefault: {}".format(val.get("value", "No default")))
		if "constraint" in val:
			print("\tConstraint: {}".format(pretty_print_constraint(val["constraint"], key)))

		strings = split_string(val.get("help", "No help provided"), 80)
		for s in strings:
			print("\t{}".format(s))
		print("")


if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument("mode", type=str,
		choices=["defconfig", "listconstraints", "checkconfig", "genconfig", "describe"], help="Generate config files")
	parser.add_argument("--item", "-i", dest="item", help="Only show for this item")
	args = parser.parse_args()
	random.seed()

	if args.mode == "defconfig":
		defconfig()

	elif args.mode == "listconstraints":
		listconstraints()

	elif args.mode == "checkconfig":
		checkvalid()

	elif args.mode == "genconfig":
		genconfig()

	elif args.mode == "describe":
		describe(args.item)

